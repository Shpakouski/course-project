{% extends 'base.html.twig' %}

{% block title %}Item{% endblock %}

{% block body %}
    <h1>Item</h1>

    <table class="table">
        <tbody>
            <tr>
                <th>Id</th>
                <td>{{ item.id }}</td>
            </tr>
            <tr>
                <th>Name</th>
                <td>{{ item.name }}</td>
            </tr>
        </tbody>
    </table>

    <a href="{{ path('app_item_index',{'user': user.id, 'collection': collection.id}) }}">back to list</a>

    <a href="{{ path('app_item_edit', {'user': user.id, 'collection': collection.id,'item': item.id}) }}">edit</a>

    {{ include('item/_delete_form.html.twig') }}

    <div class="container mt-5">
        <h1>{{ item.name }}</h1>
        <p>Created at: {{ item.createdAt|date('Y-m-d H:i:s') }}</p>
        {% if app.user %}
        <button id="like-button" class="btn btn-primary">Like</button>
        <span id="like-status"></span>
        {% endif %}
        <hr>
        <h2>Comments</h2>
        <ul id="comments-list" class="list-group">
            {% for comment in comments %}
                <li class="list-group-item">
                    <strong>{{ comment.user.email }}</strong>: {{ comment.content }}
                    <br>
                    <small>{{ comment.createdAt|date('Y-m-d H:i:s') }}</small>
                </li>
            {% endfor %}
        </ul>
        {% if app.user %}
        {{ form_start(commentForm, { 'attr': { 'id': 'comment-form' } }) }}
        {{ form_widget(commentForm) }}
        <button class="btn btn-success mt-2">Add Comment</button>
        {{ form_end(commentForm) }}
        {% endif %}
    </div>

{% endblock %}

{% block javascripts %}
    <script>
        window.onload = function () {
            document.getElementById('like-button').addEventListener('click', function () {
                fetch('{{ path('app_item_like', {'user': user.id, 'collection': collection.id,'id': item.id}) }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'same-origin'
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'liked') {
                            document.getElementById('like-status').innerText = 'You liked this item';
                        } else {
                            document.getElementById('like-status').innerText = 'You already liked this item';
                        }
                    });
            });

            const commentForm = document.getElementById('comment-form');
            commentForm.addEventListener('submit', function (event) {
                event.preventDefault();
                const formData = new FormData(commentForm);
                fetch('{{ path('app_item_comment', {'user': user.id, 'collection': collection.id,'id': item.id}) }}', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'same-origin'
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            const commentsList = document.getElementById('comments-list');
                            const newComment = document.createElement('li');
                            newComment.classList.add('list-group-item');
                            newComment.innerHTML = `<strong>${data.user}</strong>: ${data.content}<br><small>${data.createdAt}</small>`;
                            commentsList.appendChild(newComment);
                            commentForm.reset();
                        }
                    });
            });

            function refreshComments() {
                fetch('{{ path('app_item_show', {'user': user.id, 'collection': collection.id,'item': item.id}) }}')
                    .then(response => response.text())
                    .then(html => {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');
                        const newCommentsList = doc.getElementById('comments-list');
                        document.getElementById('comments-list').innerHTML = newCommentsList.innerHTML;
                    });
            }

            setInterval(refreshComments, 5000);
        }
    </script>
    {% block importmap %}{{ importmap('app') }}{% endblock %}
{% endblock %}
